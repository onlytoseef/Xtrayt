
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// Mock Supabase client that doesn't actually connect to Supabase
const createMockClient = () => {
  return {
    from: () => ({
      select: () => ({
        order: () => ({
          limit: () => ({
            single: () => Promise.resolve({ data: null, error: null }),
            eq: () => Promise.resolve({ data: null, error: null }),
            neq: () => Promise.resolve({ data: null, error: null }),
            then: () => Promise.resolve({ data: null, error: null }),
          }),
          eq: () => Promise.resolve({ data: null, error: null }),
          neq: () => Promise.resolve({ data: null, error: null }),
          then: () => Promise.resolve({ data: null, error: null }),
        }),
        eq: () => Promise.resolve({ data: null, error: null }),
        neq: () => Promise.resolve({ data: null, error: null }),
        then: () => Promise.resolve({ data: null, error: null }),
      }),
      insert: () => Promise.resolve({ data: null, error: null }),
      update: () => ({
        eq: () => Promise.resolve({ data: null, error: null }),
        match: () => Promise.resolve({ data: null, error: null }),
      }),
      delete: () => ({
        eq: () => Promise.resolve({ data: null, error: null }),
        match: () => Promise.resolve({ data: null, error: null }),
      }),
    }),
    storage: {
      from: () => ({
        upload: () => Promise.resolve({ data: null, error: null }),
        getPublicUrl: () => ({ data: { publicUrl: '' } }),
        list: () => Promise.resolve({ data: [], error: null }),
        remove: () => Promise.resolve({ data: null, error: null }),
      }),
    },
    auth: {
      getUser: () => Promise.resolve({ data: { user: null }, error: null }),
      getSession: () => Promise.resolve({ data: { session: null }, error: null }),
      onAuthStateChange: () => ({ 
        data: { subscription: { unsubscribe: () => {} } },
        error: null 
      }),
      signUp: () => Promise.resolve({ data: { user: null }, error: null }),
      signInWithPassword: () => Promise.resolve({ data: { user: null }, error: null }),
      signOut: () => Promise.resolve({ error: null }),
    },
  };
};

// Use mock client instead of real Supabase connection
export const supabase = createMockClient() as unknown as ReturnType<typeof createClient<Database>>;
